/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 133.0, "minX": 0.0, "maxY": 10732.0, "series": [{"data": [[0.0, 265.0], [0.1, 274.0], [0.2, 282.0], [0.3, 282.0], [0.4, 283.0], [0.5, 293.0], [0.6, 298.0], [0.7, 299.0], [0.8, 304.0], [0.9, 304.0], [1.0, 304.0], [1.1, 305.0], [1.2, 305.0], [1.3, 306.0], [1.4, 306.0], [1.5, 307.0], [1.6, 307.0], [1.7, 308.0], [1.8, 308.0], [1.9, 309.0], [2.0, 310.0], [2.1, 310.0], [2.2, 312.0], [2.3, 313.0], [2.4, 313.0], [2.5, 314.0], [2.6, 314.0], [2.7, 315.0], [2.8, 317.0], [2.9, 317.0], [3.0, 318.0], [3.1, 318.0], [3.2, 319.0], [3.3, 320.0], [3.4, 321.0], [3.5, 321.0], [3.6, 321.0], [3.7, 322.0], [3.8, 322.0], [3.9, 323.0], [4.0, 323.0], [4.1, 324.0], [4.2, 325.0], [4.3, 326.0], [4.4, 327.0], [4.5, 327.0], [4.6, 327.0], [4.7, 327.0], [4.8, 328.0], [4.9, 329.0], [5.0, 329.0], [5.1, 330.0], [5.2, 331.0], [5.3, 331.0], [5.4, 332.0], [5.5, 332.0], [5.6, 333.0], [5.7, 334.0], [5.8, 334.0], [5.9, 336.0], [6.0, 338.0], [6.1, 339.0], [6.2, 341.0], [6.3, 342.0], [6.4, 343.0], [6.5, 344.0], [6.6, 346.0], [6.7, 347.0], [6.8, 348.0], [6.9, 349.0], [7.0, 350.0], [7.1, 351.0], [7.2, 352.0], [7.3, 352.0], [7.4, 353.0], [7.5, 353.0], [7.6, 354.0], [7.7, 356.0], [7.8, 357.0], [7.9, 358.0], [8.0, 360.0], [8.1, 360.0], [8.2, 362.0], [8.3, 363.0], [8.4, 363.0], [8.5, 366.0], [8.6, 366.0], [8.7, 367.0], [8.8, 369.0], [8.9, 369.0], [9.0, 370.0], [9.1, 371.0], [9.2, 371.0], [9.3, 371.0], [9.4, 372.0], [9.5, 372.0], [9.6, 373.0], [9.7, 373.0], [9.8, 373.0], [9.9, 373.0], [10.0, 374.0], [10.1, 374.0], [10.2, 375.0], [10.3, 376.0], [10.4, 376.0], [10.5, 377.0], [10.6, 377.0], [10.7, 378.0], [10.8, 379.0], [10.9, 381.0], [11.0, 383.0], [11.1, 383.0], [11.2, 383.0], [11.3, 386.0], [11.4, 386.0], [11.5, 389.0], [11.6, 389.0], [11.7, 391.0], [11.8, 391.0], [11.9, 393.0], [12.0, 395.0], [12.1, 396.0], [12.2, 398.0], [12.3, 400.0], [12.4, 400.0], [12.5, 402.0], [12.6, 402.0], [12.7, 405.0], [12.8, 407.0], [12.9, 409.0], [13.0, 410.0], [13.1, 411.0], [13.2, 411.0], [13.3, 411.0], [13.4, 412.0], [13.5, 414.0], [13.6, 414.0], [13.7, 415.0], [13.8, 416.0], [13.9, 419.0], [14.0, 421.0], [14.1, 423.0], [14.2, 426.0], [14.3, 426.0], [14.4, 427.0], [14.5, 428.0], [14.6, 428.0], [14.7, 428.0], [14.8, 429.0], [14.9, 431.0], [15.0, 440.0], [15.1, 464.0], [15.2, 465.0], [15.3, 468.0], [15.4, 468.0], [15.5, 489.0], [15.6, 493.0], [15.7, 495.0], [15.8, 497.0], [15.9, 507.0], [16.0, 509.0], [16.1, 512.0], [16.2, 512.0], [16.3, 513.0], [16.4, 517.0], [16.5, 518.0], [16.6, 520.0], [16.7, 530.0], [16.8, 548.0], [16.9, 554.0], [17.0, 555.0], [17.1, 555.0], [17.2, 558.0], [17.3, 559.0], [17.4, 562.0], [17.5, 564.0], [17.6, 565.0], [17.7, 566.0], [17.8, 568.0], [17.9, 569.0], [18.0, 572.0], [18.1, 579.0], [18.2, 581.0], [18.3, 583.0], [18.4, 589.0], [18.5, 594.0], [18.6, 596.0], [18.7, 599.0], [18.8, 599.0], [18.9, 600.0], [19.0, 601.0], [19.1, 601.0], [19.2, 602.0], [19.3, 602.0], [19.4, 603.0], [19.5, 608.0], [19.6, 610.0], [19.7, 611.0], [19.8, 613.0], [19.9, 615.0], [20.0, 619.0], [20.1, 622.0], [20.2, 624.0], [20.3, 626.0], [20.4, 627.0], [20.5, 629.0], [20.6, 631.0], [20.7, 633.0], [20.8, 634.0], [20.9, 635.0], [21.0, 638.0], [21.1, 644.0], [21.2, 647.0], [21.3, 654.0], [21.4, 667.0], [21.5, 676.0], [21.6, 677.0], [21.7, 678.0], [21.8, 681.0], [21.9, 683.0], [22.0, 684.0], [22.1, 686.0], [22.2, 708.0], [22.3, 710.0], [22.4, 761.0], [22.5, 785.0], [22.6, 796.0], [22.7, 798.0], [22.8, 802.0], [22.9, 806.0], [23.0, 808.0], [23.1, 812.0], [23.2, 852.0], [23.3, 878.0], [23.4, 883.0], [23.5, 886.0], [23.6, 888.0], [23.7, 891.0], [23.8, 891.0], [23.9, 892.0], [24.0, 896.0], [24.1, 900.0], [24.2, 902.0], [24.3, 905.0], [24.4, 908.0], [24.5, 909.0], [24.6, 912.0], [24.7, 913.0], [24.8, 914.0], [24.9, 915.0], [25.0, 917.0], [25.1, 919.0], [25.2, 920.0], [25.3, 921.0], [25.4, 921.0], [25.5, 922.0], [25.6, 923.0], [25.7, 923.0], [25.8, 924.0], [25.9, 925.0], [26.0, 926.0], [26.1, 927.0], [26.2, 927.0], [26.3, 928.0], [26.4, 929.0], [26.5, 929.0], [26.6, 930.0], [26.7, 930.0], [26.8, 931.0], [26.9, 932.0], [27.0, 932.0], [27.1, 933.0], [27.2, 934.0], [27.3, 935.0], [27.4, 935.0], [27.5, 936.0], [27.6, 937.0], [27.7, 938.0], [27.8, 939.0], [27.9, 940.0], [28.0, 940.0], [28.1, 942.0], [28.2, 943.0], [28.3, 944.0], [28.4, 945.0], [28.5, 946.0], [28.6, 947.0], [28.7, 952.0], [28.8, 958.0], [28.9, 964.0], [29.0, 965.0], [29.1, 966.0], [29.2, 966.0], [29.3, 968.0], [29.4, 968.0], [29.5, 969.0], [29.6, 970.0], [29.7, 971.0], [29.8, 972.0], [29.9, 973.0], [30.0, 973.0], [30.1, 975.0], [30.2, 976.0], [30.3, 976.0], [30.4, 977.0], [30.5, 977.0], [30.6, 977.0], [30.7, 977.0], [30.8, 978.0], [30.9, 982.0], [31.0, 1099.0], [31.1, 1100.0], [31.2, 1101.0], [31.3, 1102.0], [31.4, 1107.0], [31.5, 1107.0], [31.6, 1109.0], [31.7, 1110.0], [31.8, 1111.0], [31.9, 1113.0], [32.0, 1114.0], [32.1, 1118.0], [32.2, 1132.0], [32.3, 1133.0], [32.4, 1134.0], [32.5, 1145.0], [32.6, 1146.0], [32.7, 1148.0], [32.8, 1149.0], [32.9, 1150.0], [33.0, 1151.0], [33.1, 1152.0], [33.2, 1184.0], [33.3, 1189.0], [33.4, 1189.0], [33.5, 1207.0], [33.6, 1217.0], [33.7, 1218.0], [33.8, 1220.0], [33.9, 1220.0], [34.0, 1223.0], [34.1, 1225.0], [34.2, 1226.0], [34.3, 1228.0], [34.4, 1229.0], [34.5, 1229.0], [34.6, 1230.0], [34.7, 1230.0], [34.8, 1232.0], [34.9, 1237.0], [35.0, 1238.0], [35.1, 1241.0], [35.2, 1243.0], [35.3, 1246.0], [35.4, 1249.0], [35.5, 1249.0], [35.6, 1252.0], [35.7, 1255.0], [35.8, 1257.0], [35.9, 1259.0], [36.0, 1262.0], [36.1, 1266.0], [36.2, 1271.0], [36.3, 1274.0], [36.4, 1278.0], [36.5, 1282.0], [36.6, 1288.0], [36.7, 1289.0], [36.8, 1289.0], [36.9, 1290.0], [37.0, 1291.0], [37.1, 1293.0], [37.2, 1293.0], [37.3, 1295.0], [37.4, 1296.0], [37.5, 1299.0], [37.6, 1300.0], [37.7, 1302.0], [37.8, 1302.0], [37.9, 1303.0], [38.0, 1307.0], [38.1, 1308.0], [38.2, 1308.0], [38.3, 1310.0], [38.4, 1310.0], [38.5, 1317.0], [38.6, 1322.0], [38.7, 1325.0], [38.8, 1331.0], [38.9, 1332.0], [39.0, 1334.0], [39.1, 1344.0], [39.2, 1345.0], [39.3, 1345.0], [39.4, 1346.0], [39.5, 1349.0], [39.6, 1355.0], [39.7, 1359.0], [39.8, 1368.0], [39.9, 1396.0], [40.0, 1397.0], [40.1, 1405.0], [40.2, 1406.0], [40.3, 1408.0], [40.4, 1429.0], [40.5, 1432.0], [40.6, 1432.0], [40.7, 1436.0], [40.8, 1439.0], [40.9, 1491.0], [41.0, 1499.0], [41.1, 1579.0], [41.2, 1582.0], [41.3, 1583.0], [41.4, 1585.0], [41.5, 1586.0], [41.6, 1590.0], [41.7, 1593.0], [41.8, 1596.0], [41.9, 1598.0], [42.0, 1604.0], [42.1, 1605.0], [42.2, 1703.0], [42.3, 1707.0], [42.4, 1709.0], [42.5, 1710.0], [42.6, 1713.0], [42.7, 1714.0], [42.8, 1715.0], [42.9, 1716.0], [43.0, 1719.0], [43.1, 1721.0], [43.2, 1731.0], [43.3, 1732.0], [43.4, 1738.0], [43.5, 1748.0], [43.6, 1766.0], [43.7, 1767.0], [43.8, 1774.0], [43.9, 1775.0], [44.0, 1777.0], [44.1, 1780.0], [44.2, 1781.0], [44.3, 1784.0], [44.4, 1785.0], [44.5, 1785.0], [44.6, 1786.0], [44.7, 1786.0], [44.8, 1788.0], [44.9, 1789.0], [45.0, 1793.0], [45.1, 1796.0], [45.2, 1797.0], [45.3, 1797.0], [45.4, 1799.0], [45.5, 1802.0], [45.6, 1802.0], [45.7, 1804.0], [45.8, 1805.0], [45.9, 1807.0], [46.0, 1809.0], [46.1, 1810.0], [46.2, 1811.0], [46.3, 1815.0], [46.4, 1819.0], [46.5, 1821.0], [46.6, 1834.0], [46.7, 1840.0], [46.8, 1841.0], [46.9, 1842.0], [47.0, 1842.0], [47.1, 1844.0], [47.2, 1845.0], [47.3, 1847.0], [47.4, 1847.0], [47.5, 1848.0], [47.6, 1848.0], [47.7, 1849.0], [47.8, 1851.0], [47.9, 1852.0], [48.0, 1853.0], [48.1, 1854.0], [48.2, 1854.0], [48.3, 1856.0], [48.4, 1860.0], [48.5, 1860.0], [48.6, 1861.0], [48.7, 1861.0], [48.8, 1861.0], [48.9, 1861.0], [49.0, 1862.0], [49.1, 1863.0], [49.2, 1864.0], [49.3, 1866.0], [49.4, 1867.0], [49.5, 1869.0], [49.6, 1871.0], [49.7, 1873.0], [49.8, 1874.0], [49.9, 1888.0], [50.0, 1895.0], [50.1, 1898.0], [50.2, 1898.0], [50.3, 1899.0], [50.4, 1900.0], [50.5, 1906.0], [50.6, 1906.0], [50.7, 1909.0], [50.8, 1913.0], [50.9, 1913.0], [51.0, 1916.0], [51.1, 1917.0], [51.2, 1918.0], [51.3, 1921.0], [51.4, 1923.0], [51.5, 1924.0], [51.6, 1924.0], [51.7, 1925.0], [51.8, 1925.0], [51.9, 1926.0], [52.0, 1927.0], [52.1, 1927.0], [52.2, 1927.0], [52.3, 1930.0], [52.4, 1932.0], [52.5, 1932.0], [52.6, 1934.0], [52.7, 1934.0], [52.8, 1935.0], [52.9, 1936.0], [53.0, 1936.0], [53.1, 1938.0], [53.2, 1940.0], [53.3, 1941.0], [53.4, 1941.0], [53.5, 1945.0], [53.6, 1950.0], [53.7, 1960.0], [53.8, 1962.0], [53.9, 1963.0], [54.0, 1964.0], [54.1, 1964.0], [54.2, 1965.0], [54.3, 1966.0], [54.4, 1966.0], [54.5, 1967.0], [54.6, 1968.0], [54.7, 1969.0], [54.8, 1970.0], [54.9, 1973.0], [55.0, 1977.0], [55.1, 1977.0], [55.2, 1978.0], [55.3, 1980.0], [55.4, 1981.0], [55.5, 1987.0], [55.6, 1988.0], [55.7, 1989.0], [55.8, 1989.0], [55.9, 1990.0], [56.0, 1992.0], [56.1, 1994.0], [56.2, 1994.0], [56.3, 1995.0], [56.4, 1996.0], [56.5, 1997.0], [56.6, 1997.0], [56.7, 1998.0], [56.8, 1999.0], [56.9, 2000.0], [57.0, 2002.0], [57.1, 2002.0], [57.2, 2004.0], [57.3, 2005.0], [57.4, 2006.0], [57.5, 2007.0], [57.6, 2007.0], [57.7, 2008.0], [57.8, 2009.0], [57.9, 2011.0], [58.0, 2013.0], [58.1, 2013.0], [58.2, 2015.0], [58.3, 2015.0], [58.4, 2019.0], [58.5, 2021.0], [58.6, 2021.0], [58.7, 2022.0], [58.8, 2023.0], [58.9, 2023.0], [59.0, 2026.0], [59.1, 2028.0], [59.2, 2031.0], [59.3, 2036.0], [59.4, 2037.0], [59.5, 2041.0], [59.6, 2122.0], [59.7, 2132.0], [59.8, 2142.0], [59.9, 2143.0], [60.0, 2154.0], [60.1, 2157.0], [60.2, 2236.0], [60.3, 2263.0], [60.4, 2264.0], [60.5, 2380.0], [60.6, 2445.0], [60.7, 2551.0], [60.8, 2556.0], [60.9, 2562.0], [61.0, 2564.0], [61.1, 2636.0], [61.2, 2638.0], [61.3, 2639.0], [61.4, 2640.0], [61.5, 2640.0], [61.6, 2640.0], [61.7, 2640.0], [61.8, 2642.0], [61.9, 2642.0], [62.0, 2642.0], [62.1, 2643.0], [62.2, 2643.0], [62.3, 2644.0], [62.4, 2644.0], [62.5, 2644.0], [62.6, 2645.0], [62.7, 2646.0], [62.8, 2646.0], [62.9, 2646.0], [63.0, 2647.0], [63.1, 2648.0], [63.2, 2650.0], [63.3, 2650.0], [63.4, 2652.0], [63.5, 2653.0], [63.6, 2657.0], [63.7, 2657.0], [63.8, 2659.0], [63.9, 2660.0], [64.0, 2660.0], [64.1, 2660.0], [64.2, 2661.0], [64.3, 2661.0], [64.4, 2662.0], [64.5, 2662.0], [64.6, 2663.0], [64.7, 2663.0], [64.8, 2663.0], [64.9, 2664.0], [65.0, 2664.0], [65.1, 2664.0], [65.2, 2665.0], [65.3, 2665.0], [65.4, 2665.0], [65.5, 2665.0], [65.6, 2665.0], [65.7, 2665.0], [65.8, 2665.0], [65.9, 2666.0], [66.0, 2666.0], [66.1, 2666.0], [66.2, 2666.0], [66.3, 2666.0], [66.4, 2666.0], [66.5, 2667.0], [66.6, 2667.0], [66.7, 2667.0], [66.8, 2667.0], [66.9, 2667.0], [67.0, 2667.0], [67.1, 2668.0], [67.2, 2668.0], [67.3, 2668.0], [67.4, 2668.0], [67.5, 2668.0], [67.6, 2668.0], [67.7, 2668.0], [67.8, 2669.0], [67.9, 2669.0], [68.0, 2669.0], [68.1, 2669.0], [68.2, 2670.0], [68.3, 2670.0], [68.4, 2671.0], [68.5, 2672.0], [68.6, 2672.0], [68.7, 2672.0], [68.8, 2672.0], [68.9, 2673.0], [69.0, 2673.0], [69.1, 2674.0], [69.2, 2676.0], [69.3, 2676.0], [69.4, 2684.0], [69.5, 2684.0], [69.6, 2686.0], [69.7, 2693.0], [69.8, 2694.0], [69.9, 2695.0], [70.0, 2695.0], [70.1, 2695.0], [70.2, 2697.0], [70.3, 2697.0], [70.4, 2697.0], [70.5, 2699.0], [70.6, 2699.0], [70.7, 2702.0], [70.8, 2702.0], [70.9, 2705.0], [71.0, 2707.0], [71.1, 2707.0], [71.2, 2708.0], [71.3, 2710.0], [71.4, 2713.0], [71.5, 2714.0], [71.6, 2714.0], [71.7, 2715.0], [71.8, 2717.0], [71.9, 2717.0], [72.0, 2719.0], [72.1, 2720.0], [72.2, 2721.0], [72.3, 2721.0], [72.4, 2721.0], [72.5, 2722.0], [72.6, 2723.0], [72.7, 2723.0], [72.8, 2723.0], [72.9, 2724.0], [73.0, 2725.0], [73.1, 2725.0], [73.2, 2726.0], [73.3, 2726.0], [73.4, 2726.0], [73.5, 2727.0], [73.6, 2727.0], [73.7, 2728.0], [73.8, 2729.0], [73.9, 2729.0], [74.0, 2729.0], [74.1, 2730.0], [74.2, 2730.0], [74.3, 2731.0], [74.4, 2731.0], [74.5, 2731.0], [74.6, 2734.0], [74.7, 2743.0], [74.8, 2743.0], [74.9, 2745.0], [75.0, 2746.0], [75.1, 2747.0], [75.2, 2748.0], [75.3, 2748.0], [75.4, 2748.0], [75.5, 2750.0], [75.6, 2751.0], [75.7, 2752.0], [75.8, 2753.0], [75.9, 2753.0], [76.0, 2755.0], [76.1, 2756.0], [76.2, 2756.0], [76.3, 2757.0], [76.4, 2757.0], [76.5, 2757.0], [76.6, 2758.0], [76.7, 2758.0], [76.8, 2759.0], [76.9, 2762.0], [77.0, 2762.0], [77.1, 2762.0], [77.2, 2764.0], [77.3, 2765.0], [77.4, 2767.0], [77.5, 2769.0], [77.6, 2770.0], [77.7, 2771.0], [77.8, 2772.0], [77.9, 2773.0], [78.0, 2778.0], [78.1, 2780.0], [78.2, 2792.0], [78.3, 2797.0], [78.4, 2801.0], [78.5, 2818.0], [78.6, 2821.0], [78.7, 2823.0], [78.8, 2828.0], [78.9, 2828.0], [79.0, 2832.0], [79.1, 2838.0], [79.2, 2842.0], [79.3, 2842.0], [79.4, 2844.0], [79.5, 2844.0], [79.6, 2846.0], [79.7, 2847.0], [79.8, 2848.0], [79.9, 2849.0], [80.0, 2857.0], [80.1, 2859.0], [80.2, 2861.0], [80.3, 2862.0], [80.4, 2867.0], [80.5, 2872.0], [80.6, 2873.0], [80.7, 2875.0], [80.8, 2875.0], [80.9, 2876.0], [81.0, 2876.0], [81.1, 2876.0], [81.2, 2877.0], [81.3, 2877.0], [81.4, 2878.0], [81.5, 2878.0], [81.6, 2878.0], [81.7, 2879.0], [81.8, 2879.0], [81.9, 2880.0], [82.0, 2881.0], [82.1, 2881.0], [82.2, 2882.0], [82.3, 2883.0], [82.4, 2883.0], [82.5, 2884.0], [82.6, 2884.0], [82.7, 2886.0], [82.8, 2887.0], [82.9, 2888.0], [83.0, 2889.0], [83.1, 2890.0], [83.2, 2891.0], [83.3, 2891.0], [83.4, 2892.0], [83.5, 2892.0], [83.6, 2893.0], [83.7, 2893.0], [83.8, 2893.0], [83.9, 2894.0], [84.0, 2894.0], [84.1, 2894.0], [84.2, 2895.0], [84.3, 2895.0], [84.4, 2895.0], [84.5, 2895.0], [84.6, 2896.0], [84.7, 2896.0], [84.8, 2896.0], [84.9, 2896.0], [85.0, 2897.0], [85.1, 2897.0], [85.2, 2897.0], [85.3, 2897.0], [85.4, 2898.0], [85.5, 2898.0], [85.6, 2898.0], [85.7, 2898.0], [85.8, 2898.0], [85.9, 2899.0], [86.0, 2899.0], [86.1, 2899.0], [86.2, 2900.0], [86.3, 2900.0], [86.4, 2900.0], [86.5, 2901.0], [86.6, 2901.0], [86.7, 2901.0], [86.8, 2902.0], [86.9, 2902.0], [87.0, 2902.0], [87.1, 2903.0], [87.2, 2903.0], [87.3, 2903.0], [87.4, 2905.0], [87.5, 2906.0], [87.6, 2907.0], [87.7, 2907.0], [87.8, 2907.0], [87.9, 2907.0], [88.0, 2911.0], [88.1, 2913.0], [88.2, 2914.0], [88.3, 2918.0], [88.4, 2918.0], [88.5, 2919.0], [88.6, 3101.0], [88.7, 3117.0], [88.8, 3130.0], [88.9, 3189.0], [89.0, 3195.0], [89.1, 3206.0], [89.2, 3208.0], [89.3, 3211.0], [89.4, 3215.0], [89.5, 3219.0], [89.6, 3222.0], [89.7, 3227.0], [89.8, 3231.0], [89.9, 3234.0], [90.0, 3238.0], [90.1, 3246.0], [90.2, 3247.0], [90.3, 3253.0], [90.4, 3276.0], [90.5, 3361.0], [90.6, 3370.0], [90.7, 3395.0], [90.8, 3397.0], [90.9, 3399.0], [91.0, 3400.0], [91.1, 3514.0], [91.2, 3704.0], [91.3, 3792.0], [91.4, 3857.0], [91.5, 3871.0], [91.6, 3872.0], [91.7, 3873.0], [91.8, 3914.0], [91.9, 3917.0], [92.0, 3920.0], [92.1, 3927.0], [92.2, 3938.0], [92.3, 3953.0], [92.4, 3957.0], [92.5, 3987.0], [92.6, 4037.0], [92.7, 4041.0], [92.8, 4065.0], [92.9, 4078.0], [93.0, 4081.0], [93.1, 4083.0], [93.2, 4085.0], [93.3, 4086.0], [93.4, 4089.0], [93.5, 4092.0], [93.6, 4093.0], [93.7, 4094.0], [93.8, 4095.0], [93.9, 4096.0], [94.0, 4097.0], [94.1, 4099.0], [94.2, 4099.0], [94.3, 4100.0], [94.4, 4100.0], [94.5, 4101.0], [94.6, 4102.0], [94.7, 4104.0], [94.8, 4114.0], [94.9, 4605.0], [95.0, 4789.0], [95.1, 4791.0], [95.2, 4793.0], [95.3, 4816.0], [95.4, 5025.0], [95.5, 5397.0], [95.6, 5425.0], [95.7, 5433.0], [95.8, 5442.0], [95.9, 5449.0], [96.0, 5585.0], [96.1, 5637.0], [96.2, 5642.0], [96.3, 5644.0], [96.4, 5651.0], [96.5, 5807.0], [96.6, 5829.0], [96.7, 5837.0], [96.8, 5840.0], [96.9, 5841.0], [97.0, 5841.0], [97.1, 5843.0], [97.2, 5843.0], [97.3, 5844.0], [97.4, 5846.0], [97.5, 5847.0], [97.6, 5847.0], [97.7, 5849.0], [97.8, 5851.0], [97.9, 5853.0], [98.0, 5855.0], [98.1, 5855.0], [98.2, 5945.0], [98.3, 5949.0], [98.4, 5951.0], [98.5, 5951.0], [98.6, 5951.0], [98.7, 5952.0], [98.8, 5953.0], [98.9, 5954.0], [99.0, 5954.0], [99.1, 5955.0], [99.2, 5956.0], [99.3, 5957.0], [99.4, 5960.0], [99.5, 5961.0], [99.6, 6039.0], [99.7, 6273.0], [99.8, 6448.0], [99.9, 7291.0]], "isOverall": false, "label": "Divide", "isController": false}, {"data": [[0.0, 133.0], [0.1, 136.0], [0.2, 143.0], [0.3, 149.0], [0.4, 155.0], [0.5, 156.0], [0.6, 157.0], [0.7, 158.0], [0.8, 159.0], [0.9, 160.0], [1.0, 161.0], [1.1, 164.0], [1.2, 165.0], [1.3, 166.0], [1.4, 166.0], [1.5, 169.0], [1.6, 169.0], [1.7, 169.0], [1.8, 170.0], [1.9, 171.0], [2.0, 173.0], [2.1, 174.0], [2.2, 174.0], [2.3, 174.0], [2.4, 175.0], [2.5, 176.0], [2.6, 176.0], [2.7, 177.0], [2.8, 178.0], [2.9, 178.0], [3.0, 178.0], [3.1, 178.0], [3.2, 179.0], [3.3, 179.0], [3.4, 179.0], [3.5, 179.0], [3.6, 179.0], [3.7, 179.0], [3.8, 180.0], [3.9, 180.0], [4.0, 180.0], [4.1, 180.0], [4.2, 181.0], [4.3, 181.0], [4.4, 182.0], [4.5, 182.0], [4.6, 182.0], [4.7, 183.0], [4.8, 184.0], [4.9, 184.0], [5.0, 184.0], [5.1, 185.0], [5.2, 185.0], [5.3, 185.0], [5.4, 185.0], [5.5, 186.0], [5.6, 186.0], [5.7, 186.0], [5.8, 186.0], [5.9, 187.0], [6.0, 187.0], [6.1, 188.0], [6.2, 188.0], [6.3, 188.0], [6.4, 188.0], [6.5, 189.0], [6.6, 189.0], [6.7, 190.0], [6.8, 191.0], [6.9, 192.0], [7.0, 192.0], [7.1, 193.0], [7.2, 193.0], [7.3, 193.0], [7.4, 194.0], [7.5, 194.0], [7.6, 195.0], [7.7, 196.0], [7.8, 198.0], [7.9, 203.0], [8.0, 205.0], [8.1, 207.0], [8.2, 207.0], [8.3, 209.0], [8.4, 212.0], [8.5, 218.0], [8.6, 222.0], [8.7, 223.0], [8.8, 223.0], [8.9, 225.0], [9.0, 227.0], [9.1, 229.0], [9.2, 231.0], [9.3, 233.0], [9.4, 234.0], [9.5, 234.0], [9.6, 236.0], [9.7, 236.0], [9.8, 238.0], [9.9, 238.0], [10.0, 239.0], [10.1, 242.0], [10.2, 244.0], [10.3, 244.0], [10.4, 245.0], [10.5, 246.0], [10.6, 247.0], [10.7, 247.0], [10.8, 248.0], [10.9, 249.0], [11.0, 261.0], [11.1, 263.0], [11.2, 277.0], [11.3, 277.0], [11.4, 279.0], [11.5, 284.0], [11.6, 287.0], [11.7, 287.0], [11.8, 289.0], [11.9, 291.0], [12.0, 292.0], [12.1, 293.0], [12.2, 294.0], [12.3, 295.0], [12.4, 298.0], [12.5, 299.0], [12.6, 299.0], [12.7, 300.0], [12.8, 300.0], [12.9, 302.0], [13.0, 303.0], [13.1, 304.0], [13.2, 338.0], [13.3, 354.0], [13.4, 354.0], [13.5, 360.0], [13.6, 360.0], [13.7, 361.0], [13.8, 361.0], [13.9, 362.0], [14.0, 363.0], [14.1, 364.0], [14.2, 364.0], [14.3, 365.0], [14.4, 365.0], [14.5, 365.0], [14.6, 365.0], [14.7, 366.0], [14.8, 366.0], [14.9, 367.0], [15.0, 368.0], [15.1, 368.0], [15.2, 374.0], [15.3, 378.0], [15.4, 379.0], [15.5, 380.0], [15.6, 380.0], [15.7, 381.0], [15.8, 381.0], [15.9, 381.0], [16.0, 381.0], [16.1, 381.0], [16.2, 381.0], [16.3, 382.0], [16.4, 382.0], [16.5, 382.0], [16.6, 382.0], [16.7, 382.0], [16.8, 382.0], [16.9, 383.0], [17.0, 383.0], [17.1, 383.0], [17.2, 383.0], [17.3, 383.0], [17.4, 384.0], [17.5, 384.0], [17.6, 385.0], [17.7, 386.0], [17.8, 387.0], [17.9, 388.0], [18.0, 388.0], [18.1, 388.0], [18.2, 389.0], [18.3, 389.0], [18.4, 389.0], [18.5, 390.0], [18.6, 406.0], [18.7, 416.0], [18.8, 417.0], [18.9, 417.0], [19.0, 418.0], [19.1, 418.0], [19.2, 421.0], [19.3, 422.0], [19.4, 422.0], [19.5, 424.0], [19.6, 425.0], [19.7, 427.0], [19.8, 428.0], [19.9, 431.0], [20.0, 432.0], [20.1, 433.0], [20.2, 434.0], [20.3, 434.0], [20.4, 435.0], [20.5, 435.0], [20.6, 435.0], [20.7, 436.0], [20.8, 436.0], [20.9, 436.0], [21.0, 436.0], [21.1, 437.0], [21.2, 437.0], [21.3, 437.0], [21.4, 438.0], [21.5, 439.0], [21.6, 456.0], [21.7, 458.0], [21.8, 468.0], [21.9, 474.0], [22.0, 476.0], [22.1, 476.0], [22.2, 477.0], [22.3, 478.0], [22.4, 482.0], [22.5, 510.0], [22.6, 511.0], [22.7, 511.0], [22.8, 513.0], [22.9, 513.0], [23.0, 513.0], [23.1, 514.0], [23.2, 515.0], [23.3, 515.0], [23.4, 516.0], [23.5, 564.0], [23.6, 569.0], [23.7, 666.0], [23.8, 667.0], [23.9, 667.0], [24.0, 667.0], [24.1, 667.0], [24.2, 670.0], [24.3, 672.0], [24.4, 674.0], [24.5, 680.0], [24.6, 680.0], [24.7, 681.0], [24.8, 684.0], [24.9, 684.0], [25.0, 695.0], [25.1, 695.0], [25.2, 696.0], [25.3, 697.0], [25.4, 697.0], [25.5, 697.0], [25.6, 698.0], [25.7, 698.0], [25.8, 701.0], [25.9, 740.0], [26.0, 756.0], [26.1, 759.0], [26.2, 766.0], [26.3, 767.0], [26.4, 776.0], [26.5, 809.0], [26.6, 809.0], [26.7, 813.0], [26.8, 813.0], [26.9, 814.0], [27.0, 815.0], [27.1, 816.0], [27.2, 818.0], [27.3, 819.0], [27.4, 822.0], [27.5, 826.0], [27.6, 827.0], [27.7, 832.0], [27.8, 847.0], [27.9, 847.0], [28.0, 848.0], [28.1, 851.0], [28.2, 852.0], [28.3, 854.0], [28.4, 857.0], [28.5, 869.0], [28.6, 870.0], [28.7, 875.0], [28.8, 896.0], [28.9, 937.0], [29.0, 944.0], [29.1, 945.0], [29.2, 953.0], [29.3, 976.0], [29.4, 977.0], [29.5, 996.0], [29.6, 997.0], [29.7, 1018.0], [29.8, 1022.0], [29.9, 1026.0], [30.0, 1026.0], [30.1, 1030.0], [30.2, 1032.0], [30.3, 1036.0], [30.4, 1038.0], [30.5, 1040.0], [30.6, 1046.0], [30.7, 1049.0], [30.8, 1050.0], [30.9, 1061.0], [31.0, 1064.0], [31.1, 1068.0], [31.2, 1069.0], [31.3, 1071.0], [31.4, 1072.0], [31.5, 1073.0], [31.6, 1074.0], [31.7, 1074.0], [31.8, 1075.0], [31.9, 1076.0], [32.0, 1078.0], [32.1, 1079.0], [32.2, 1079.0], [32.3, 1080.0], [32.4, 1080.0], [32.5, 1081.0], [32.6, 1081.0], [32.7, 1082.0], [32.8, 1083.0], [32.9, 1085.0], [33.0, 1085.0], [33.1, 1089.0], [33.2, 1090.0], [33.3, 1091.0], [33.4, 1092.0], [33.5, 1092.0], [33.6, 1093.0], [33.7, 1093.0], [33.8, 1094.0], [33.9, 1094.0], [34.0, 1095.0], [34.1, 1096.0], [34.2, 1096.0], [34.3, 1097.0], [34.4, 1098.0], [34.5, 1099.0], [34.6, 1099.0], [34.7, 1099.0], [34.8, 1100.0], [34.9, 1102.0], [35.0, 1103.0], [35.1, 1103.0], [35.2, 1104.0], [35.3, 1106.0], [35.4, 1107.0], [35.5, 1108.0], [35.6, 1108.0], [35.7, 1108.0], [35.8, 1115.0], [35.9, 1117.0], [36.0, 1117.0], [36.1, 1118.0], [36.2, 1118.0], [36.3, 1118.0], [36.4, 1118.0], [36.5, 1118.0], [36.6, 1119.0], [36.7, 1121.0], [36.8, 1125.0], [36.9, 1128.0], [37.0, 1129.0], [37.1, 1129.0], [37.2, 1130.0], [37.3, 1130.0], [37.4, 1131.0], [37.5, 1142.0], [37.6, 1145.0], [37.7, 1147.0], [37.8, 1149.0], [37.9, 1152.0], [38.0, 1227.0], [38.1, 1229.0], [38.2, 1230.0], [38.3, 1231.0], [38.4, 1232.0], [38.5, 1234.0], [38.6, 1236.0], [38.7, 1238.0], [38.8, 1240.0], [38.9, 1242.0], [39.0, 1253.0], [39.1, 1258.0], [39.2, 1268.0], [39.3, 1269.0], [39.4, 1270.0], [39.5, 1270.0], [39.6, 1270.0], [39.7, 1270.0], [39.8, 1270.0], [39.9, 1270.0], [40.0, 1271.0], [40.1, 1271.0], [40.2, 1271.0], [40.3, 1272.0], [40.4, 1272.0], [40.5, 1272.0], [40.6, 1274.0], [40.7, 1285.0], [40.8, 1286.0], [40.9, 1289.0], [41.0, 1301.0], [41.1, 1316.0], [41.2, 1352.0], [41.3, 1357.0], [41.4, 1357.0], [41.5, 1358.0], [41.6, 1365.0], [41.7, 1403.0], [41.8, 1412.0], [41.9, 1430.0], [42.0, 1432.0], [42.1, 1445.0], [42.2, 1470.0], [42.3, 1471.0], [42.4, 1471.0], [42.5, 1481.0], [42.6, 1493.0], [42.7, 1500.0], [42.8, 1508.0], [42.9, 1511.0], [43.0, 1513.0], [43.1, 1516.0], [43.2, 1517.0], [43.3, 1517.0], [43.4, 1518.0], [43.5, 1525.0], [43.6, 1532.0], [43.7, 1533.0], [43.8, 1533.0], [43.9, 1538.0], [44.0, 1546.0], [44.1, 1548.0], [44.2, 1646.0], [44.3, 1648.0], [44.4, 1652.0], [44.5, 1656.0], [44.6, 1664.0], [44.7, 1670.0], [44.8, 1714.0], [44.9, 1717.0], [45.0, 1721.0], [45.1, 1724.0], [45.2, 1729.0], [45.3, 1730.0], [45.4, 1734.0], [45.5, 1743.0], [45.6, 1752.0], [45.7, 1763.0], [45.8, 1766.0], [45.9, 1767.0], [46.0, 1771.0], [46.1, 1777.0], [46.2, 1777.0], [46.3, 1782.0], [46.4, 1782.0], [46.5, 1784.0], [46.6, 1788.0], [46.7, 1788.0], [46.8, 1788.0], [46.9, 1791.0], [47.0, 1794.0], [47.1, 1795.0], [47.2, 1795.0], [47.3, 1796.0], [47.4, 1796.0], [47.5, 1808.0], [47.6, 1812.0], [47.7, 1812.0], [47.8, 1812.0], [47.9, 1814.0], [48.0, 1825.0], [48.1, 1841.0], [48.2, 1901.0], [48.3, 1909.0], [48.4, 1911.0], [48.5, 1911.0], [48.6, 1912.0], [48.7, 1913.0], [48.8, 1915.0], [48.9, 1917.0], [49.0, 1922.0], [49.1, 1925.0], [49.2, 1927.0], [49.3, 1927.0], [49.4, 1927.0], [49.5, 1928.0], [49.6, 1929.0], [49.7, 1929.0], [49.8, 1930.0], [49.9, 1931.0], [50.0, 1933.0], [50.1, 1966.0], [50.2, 2077.0], [50.3, 2221.0], [50.4, 2227.0], [50.5, 2233.0], [50.6, 2236.0], [50.7, 2238.0], [50.8, 2239.0], [50.9, 2240.0], [51.0, 2240.0], [51.1, 2242.0], [51.2, 2242.0], [51.3, 2242.0], [51.4, 2242.0], [51.5, 2244.0], [51.6, 2245.0], [51.7, 2246.0], [51.8, 2246.0], [51.9, 2247.0], [52.0, 2248.0], [52.1, 2249.0], [52.2, 2251.0], [52.3, 2281.0], [52.4, 2285.0], [52.5, 2287.0], [52.6, 2380.0], [52.7, 2387.0], [52.8, 2395.0], [52.9, 2398.0], [53.0, 2402.0], [53.1, 2403.0], [53.2, 2433.0], [53.3, 2467.0], [53.4, 2470.0], [53.5, 2473.0], [53.6, 2542.0], [53.7, 2553.0], [53.8, 2659.0], [53.9, 2672.0], [54.0, 2680.0], [54.1, 2681.0], [54.2, 2681.0], [54.3, 2683.0], [54.4, 2685.0], [54.5, 2685.0], [54.6, 2686.0], [54.7, 2686.0], [54.8, 2687.0], [54.9, 2688.0], [55.0, 2688.0], [55.1, 2688.0], [55.2, 2688.0], [55.3, 2689.0], [55.4, 2689.0], [55.5, 2689.0], [55.6, 2690.0], [55.7, 2690.0], [55.8, 2690.0], [55.9, 2690.0], [56.0, 2691.0], [56.1, 2691.0], [56.2, 2691.0], [56.3, 2691.0], [56.4, 2692.0], [56.5, 2692.0], [56.6, 2692.0], [56.7, 2693.0], [56.8, 2693.0], [56.9, 2694.0], [57.0, 2694.0], [57.1, 2694.0], [57.2, 2695.0], [57.3, 2696.0], [57.4, 2696.0], [57.5, 2697.0], [57.6, 2697.0], [57.7, 2697.0], [57.8, 2698.0], [57.9, 2699.0], [58.0, 2699.0], [58.1, 2700.0], [58.2, 2700.0], [58.3, 2701.0], [58.4, 2701.0], [58.5, 2701.0], [58.6, 2701.0], [58.7, 2701.0], [58.8, 2702.0], [58.9, 2702.0], [59.0, 2702.0], [59.1, 2702.0], [59.2, 2703.0], [59.3, 2703.0], [59.4, 2704.0], [59.5, 2704.0], [59.6, 2705.0], [59.7, 2705.0], [59.8, 2705.0], [59.9, 2706.0], [60.0, 2706.0], [60.1, 2706.0], [60.2, 2707.0], [60.3, 2707.0], [60.4, 2707.0], [60.5, 2707.0], [60.6, 2708.0], [60.7, 2708.0], [60.8, 2708.0], [60.9, 2709.0], [61.0, 2709.0], [61.1, 2709.0], [61.2, 2710.0], [61.3, 2710.0], [61.4, 2710.0], [61.5, 2711.0], [61.6, 2711.0], [61.7, 2712.0], [61.8, 2712.0], [61.9, 2712.0], [62.0, 2713.0], [62.1, 2713.0], [62.2, 2713.0], [62.3, 2714.0], [62.4, 2714.0], [62.5, 2714.0], [62.6, 2714.0], [62.7, 2715.0], [62.8, 2715.0], [62.9, 2715.0], [63.0, 2716.0], [63.1, 2716.0], [63.2, 2716.0], [63.3, 2716.0], [63.4, 2716.0], [63.5, 2716.0], [63.6, 2717.0], [63.7, 2717.0], [63.8, 2717.0], [63.9, 2718.0], [64.0, 2718.0], [64.1, 2718.0], [64.2, 2718.0], [64.3, 2719.0], [64.4, 2720.0], [64.5, 2720.0], [64.6, 2720.0], [64.7, 2721.0], [64.8, 2721.0], [64.9, 2721.0], [65.0, 2721.0], [65.1, 2721.0], [65.2, 2721.0], [65.3, 2721.0], [65.4, 2722.0], [65.5, 2722.0], [65.6, 2722.0], [65.7, 2723.0], [65.8, 2723.0], [65.9, 2724.0], [66.0, 2724.0], [66.1, 2724.0], [66.2, 2724.0], [66.3, 2724.0], [66.4, 2724.0], [66.5, 2725.0], [66.6, 2725.0], [66.7, 2726.0], [66.8, 2726.0], [66.9, 2726.0], [67.0, 2727.0], [67.1, 2728.0], [67.2, 2728.0], [67.3, 2729.0], [67.4, 2729.0], [67.5, 2730.0], [67.6, 2732.0], [67.7, 2733.0], [67.8, 2736.0], [67.9, 2739.0], [68.0, 2741.0], [68.1, 2741.0], [68.2, 2742.0], [68.3, 2744.0], [68.4, 2746.0], [68.5, 2751.0], [68.6, 2751.0], [68.7, 2753.0], [68.8, 2753.0], [68.9, 2754.0], [69.0, 2754.0], [69.1, 2755.0], [69.2, 2756.0], [69.3, 2757.0], [69.4, 2757.0], [69.5, 2757.0], [69.6, 2758.0], [69.7, 2758.0], [69.8, 2760.0], [69.9, 2760.0], [70.0, 2761.0], [70.1, 2762.0], [70.2, 2763.0], [70.3, 2763.0], [70.4, 2763.0], [70.5, 2764.0], [70.6, 2764.0], [70.7, 2764.0], [70.8, 2766.0], [70.9, 2766.0], [71.0, 2766.0], [71.1, 2767.0], [71.2, 2767.0], [71.3, 2767.0], [71.4, 2768.0], [71.5, 2769.0], [71.6, 2769.0], [71.7, 2770.0], [71.8, 2770.0], [71.9, 2770.0], [72.0, 2771.0], [72.1, 2771.0], [72.2, 2771.0], [72.3, 2771.0], [72.4, 2772.0], [72.5, 2772.0], [72.6, 2773.0], [72.7, 2774.0], [72.8, 2774.0], [72.9, 2774.0], [73.0, 2775.0], [73.1, 2775.0], [73.2, 2776.0], [73.3, 2776.0], [73.4, 2777.0], [73.5, 2777.0], [73.6, 2777.0], [73.7, 2777.0], [73.8, 2778.0], [73.9, 2778.0], [74.0, 2780.0], [74.1, 2780.0], [74.2, 2780.0], [74.3, 2780.0], [74.4, 2780.0], [74.5, 2781.0], [74.6, 2781.0], [74.7, 2782.0], [74.8, 2782.0], [74.9, 2782.0], [75.0, 2783.0], [75.1, 2783.0], [75.2, 2783.0], [75.3, 2784.0], [75.4, 2784.0], [75.5, 2784.0], [75.6, 2785.0], [75.7, 2786.0], [75.8, 2786.0], [75.9, 2786.0], [76.0, 2787.0], [76.1, 2788.0], [76.2, 2788.0], [76.3, 2788.0], [76.4, 2788.0], [76.5, 2790.0], [76.6, 2791.0], [76.7, 2791.0], [76.8, 2793.0], [76.9, 2795.0], [77.0, 2797.0], [77.1, 2799.0], [77.2, 2802.0], [77.3, 2807.0], [77.4, 2808.0], [77.5, 2809.0], [77.6, 2810.0], [77.7, 2811.0], [77.8, 2812.0], [77.9, 2815.0], [78.0, 2816.0], [78.1, 2819.0], [78.2, 2821.0], [78.3, 2824.0], [78.4, 2833.0], [78.5, 2839.0], [78.6, 2843.0], [78.7, 2845.0], [78.8, 2850.0], [78.9, 2852.0], [79.0, 2854.0], [79.1, 2856.0], [79.2, 2858.0], [79.3, 2859.0], [79.4, 2860.0], [79.5, 2861.0], [79.6, 2861.0], [79.7, 2862.0], [79.8, 2863.0], [79.9, 2864.0], [80.0, 2865.0], [80.1, 2865.0], [80.2, 2865.0], [80.3, 2866.0], [80.4, 2867.0], [80.5, 2868.0], [80.6, 2868.0], [80.7, 2868.0], [80.8, 2868.0], [80.9, 2869.0], [81.0, 2869.0], [81.1, 2870.0], [81.2, 2870.0], [81.3, 2871.0], [81.4, 2871.0], [81.5, 2871.0], [81.6, 2872.0], [81.7, 2872.0], [81.8, 2872.0], [81.9, 2873.0], [82.0, 2874.0], [82.1, 2874.0], [82.2, 2874.0], [82.3, 2875.0], [82.4, 2876.0], [82.5, 2877.0], [82.6, 2878.0], [82.7, 2879.0], [82.8, 2883.0], [82.9, 2891.0], [83.0, 2891.0], [83.1, 2893.0], [83.2, 2893.0], [83.3, 2894.0], [83.4, 2899.0], [83.5, 2900.0], [83.6, 2907.0], [83.7, 2908.0], [83.8, 2909.0], [83.9, 2909.0], [84.0, 2910.0], [84.1, 2911.0], [84.2, 2917.0], [84.3, 2925.0], [84.4, 2937.0], [84.5, 2943.0], [84.6, 2959.0], [84.7, 2967.0], [84.8, 2971.0], [84.9, 2976.0], [85.0, 2977.0], [85.1, 2978.0], [85.2, 2978.0], [85.3, 2979.0], [85.4, 2980.0], [85.5, 2981.0], [85.6, 2981.0], [85.7, 2984.0], [85.8, 2985.0], [85.9, 2986.0], [86.0, 2987.0], [86.1, 2988.0], [86.2, 2988.0], [86.3, 2989.0], [86.4, 2990.0], [86.5, 2992.0], [86.6, 2997.0], [86.7, 2997.0], [86.8, 2999.0], [86.9, 3003.0], [87.0, 3006.0], [87.1, 3008.0], [87.2, 3010.0], [87.3, 3010.0], [87.4, 3012.0], [87.5, 3014.0], [87.6, 3017.0], [87.7, 3018.0], [87.8, 3029.0], [87.9, 3030.0], [88.0, 3031.0], [88.1, 3033.0], [88.2, 3041.0], [88.3, 3042.0], [88.4, 3044.0], [88.5, 3046.0], [88.6, 3049.0], [88.7, 3050.0], [88.8, 3051.0], [88.9, 3055.0], [89.0, 3062.0], [89.1, 3068.0], [89.2, 3071.0], [89.3, 3071.0], [89.4, 3073.0], [89.5, 3074.0], [89.6, 3074.0], [89.7, 3076.0], [89.8, 3077.0], [89.9, 3078.0], [90.0, 3079.0], [90.1, 3082.0], [90.2, 3085.0], [90.3, 3085.0], [90.4, 3085.0], [90.5, 3086.0], [90.6, 3087.0], [90.7, 3088.0], [90.8, 3088.0], [90.9, 3088.0], [91.0, 3089.0], [91.1, 3092.0], [91.2, 3094.0], [91.3, 3095.0], [91.4, 3095.0], [91.5, 3099.0], [91.6, 3100.0], [91.7, 3139.0], [91.8, 3159.0], [91.9, 3179.0], [92.0, 3185.0], [92.1, 3191.0], [92.2, 3272.0], [92.3, 3277.0], [92.4, 3282.0], [92.5, 3284.0], [92.6, 3285.0], [92.7, 3286.0], [92.8, 3287.0], [92.9, 3292.0], [93.0, 3299.0], [93.1, 3300.0], [93.2, 3304.0], [93.3, 3398.0], [93.4, 3401.0], [93.5, 3404.0], [93.6, 3418.0], [93.7, 3420.0], [93.8, 3458.0], [93.9, 3802.0], [94.0, 3880.0], [94.1, 3885.0], [94.2, 3886.0], [94.3, 4134.0], [94.4, 4156.0], [94.5, 4165.0], [94.6, 4184.0], [94.7, 4295.0], [94.8, 4310.0], [94.9, 4354.0], [95.0, 4497.0], [95.1, 4500.0], [95.2, 4501.0], [95.3, 4502.0], [95.4, 4504.0], [95.5, 4505.0], [95.6, 4506.0], [95.7, 4506.0], [95.8, 4507.0], [95.9, 4507.0], [96.0, 4507.0], [96.1, 4508.0], [96.2, 4510.0], [96.3, 4511.0], [96.4, 4511.0], [96.5, 4511.0], [96.6, 4512.0], [96.7, 4513.0], [96.8, 4518.0], [96.9, 4519.0], [97.0, 4523.0], [97.1, 4524.0], [97.2, 4525.0], [97.3, 4527.0], [97.4, 4541.0], [97.5, 4544.0], [97.6, 4545.0], [97.7, 4547.0], [97.8, 4548.0], [97.9, 4549.0], [98.0, 4552.0], [98.1, 4559.0], [98.2, 4561.0], [98.3, 4562.0], [98.4, 4563.0], [98.5, 4566.0], [98.6, 4574.0], [98.7, 4575.0], [98.8, 4608.0], [98.9, 4631.0], [99.0, 4636.0], [99.1, 4650.0], [99.2, 4654.0], [99.3, 4654.0], [99.4, 4655.0], [99.5, 4655.0], [99.6, 4658.0], [99.7, 4712.0], [99.8, 5011.0], [99.9, 5418.0]], "isOverall": false, "label": "Multiply", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 381.0, "series": [{"data": [[600.0, 65.0], [700.0, 12.0], [800.0, 27.0], [900.0, 137.0], [1000.0, 3.0], [1100.0, 48.0], [1200.0, 82.0], [1300.0, 51.0], [1400.0, 19.0], [1500.0, 18.0], [1600.0, 4.0], [1700.0, 66.0], [1800.0, 99.0], [1900.0, 129.0], [2000.0, 54.0], [2100.0, 12.0], [2200.0, 6.0], [2300.0, 3.0], [2400.0, 2.0], [2500.0, 7.0], [2600.0, 192.0], [2800.0, 156.0], [2700.0, 155.0], [2900.0, 48.0], [3100.0, 9.0], [3200.0, 28.0], [3300.0, 11.0], [3400.0, 2.0], [3500.0, 1.0], [3700.0, 3.0], [3600.0, 1.0], [3800.0, 9.0], [3900.0, 15.0], [4000.0, 35.0], [4100.0, 12.0], [4600.0, 1.0], [4800.0, 2.0], [4700.0, 7.0], [5000.0, 1.0], [5300.0, 2.0], [5400.0, 8.0], [5600.0, 9.0], [5500.0, 2.0], [5800.0, 33.0], [6000.0, 1.0], [5900.0, 29.0], [6200.0, 3.0], [6400.0, 2.0], [7200.0, 1.0], [10700.0, 1.0], [200.0, 15.0], [300.0, 230.0], [400.0, 71.0], [500.0, 61.0]], "isOverall": false, "label": "Divide", "isController": false}, {"data": [[600.0, 42.0], [700.0, 13.0], [800.0, 48.0], [900.0, 16.0], [1000.0, 102.0], [1100.0, 64.0], [1200.0, 61.0], [1300.0, 13.0], [1400.0, 21.0], [1500.0, 29.0], [100.0, 158.0], [1600.0, 13.0], [1700.0, 55.0], [1800.0, 14.0], [1900.0, 40.0], [2000.0, 1.0], [2200.0, 46.0], [2300.0, 8.0], [2400.0, 13.0], [2500.0, 3.0], [2600.0, 87.0], [2800.0, 127.0], [2700.0, 381.0], [2900.0, 67.0], [3000.0, 94.0], [3100.0, 13.0], [200.0, 95.0], [3300.0, 6.0], [3200.0, 17.0], [3400.0, 11.0], [3800.0, 8.0], [4300.0, 5.0], [4200.0, 2.0], [4100.0, 7.0], [4600.0, 18.0], [4500.0, 74.0], [4400.0, 2.0], [300.0, 118.0], [4700.0, 1.0], [5000.0, 1.0], [4900.0, 1.0], [5300.0, 1.0], [5400.0, 1.0], [6000.0, 1.0], [400.0, 78.0], [500.0, 24.0]], "isOverall": false, "label": "Multiply", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 10700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 731.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1673.0, "series": [{"data": [[0.0, 765.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 831.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 731.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1673.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 846.66235632184, "minX": 1.66218006E12, "maxY": 1019.9811715481181, "series": [{"data": [[1.66218006E12, 1019.9811715481181], [1.66218012E12, 846.66235632184]], "isOverall": false, "label": "Grupo de Hilo", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66218012E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 136.0, "minX": 1.0, "maxY": 10732.0, "series": [{"data": [[7.0, 7291.0], [20.0, 6448.5], [171.0, 266.0], [174.0, 294.6666666666667], [176.0, 291.0], [177.0, 307.5], [217.0, 337.1111111111111], [219.0, 331.0909090909091], [220.0, 317.27272727272725], [263.0, 320.5], [265.0, 299.0], [268.0, 5525.0], [288.0, 320.18750000000006], [296.0, 348.2916666666667], [299.0, 357.1818181818182], [303.0, 414.0], [316.0, 378.0], [313.0, 362.42857142857144], [324.0, 408.6666666666667], [336.0, 359.5], [372.0, 357.5], [371.0, 356.0], [370.0, 493.0], [369.0, 492.0], [368.0, 490.0], [416.0, 513.4545454545454], [492.0, 513.0], [491.0, 495.0], [519.0, 418.4], [537.0, 372.0], [538.0, 360.1142857142858], [536.0, 378.83333333333337], [529.0, 397.0], [532.0, 305.0], [534.0, 452.75], [528.0, 422.0], [527.0, 402.0], [522.0, 377.0], [520.0, 424.0], [517.0, 392.0], [516.0, 399.0], [518.0, 425.0], [554.0, 611.7758620689656], [568.0, 6254.0], [587.0, 403.6], [621.0, 595.0000000000001], [710.0, 322.90909090909093], [711.0, 450.0], [712.0, 473.5], [716.0, 463.59999999999997], [765.0, 5829.0], [757.0, 5841.75], [756.0, 5868.21212121212], [755.0, 5954.5], [753.0, 5957.0], [751.0, 5954.588235294118], [799.0, 5639.75], [798.0, 5465.857142857142], [796.0, 5615.0], [794.0, 5585.0], [779.0, 5637.5], [778.0, 5618.875], [772.0, 5807.0], [770.0, 5808.0], [807.0, 4888.0], [803.0, 4867.375], [801.0, 5415.0], [898.0, 412.5999999999999], [927.0, 3872.0], [926.0, 3872.0], [925.0, 3873.0], [922.0, 3873.0], [943.0, 1182.4], [946.0, 3856.5], [931.0, 4605.0], [930.0, 3871.0], [1073.0, 581.0], [1028.0, 679.0], [1031.0, 684.0], [1042.0, 685.0], [1043.0, 683.0], [1086.0, 588.5], [1065.0, 572.0], [1069.0, 555.0], [1070.0, 581.0], [1071.0, 580.5], [1144.0, 935.0], [1089.0, 583.0], [1092.0, 599.2499999999999], [1141.0, 2524.5], [1143.0, 1217.8181818181818], [1147.0, 924.4], [1148.0, 934.8571428571429], [1149.0, 956.59375], [1151.0, 969.8571428571428], [1119.0, 817.5714285714287], [1114.0, 809.0], [1113.0, 812.5], [1115.0, 893.5], [1118.0, 913.0], [1120.0, 891.0], [1121.0, 902.5714285714286], [1122.0, 897.3333333333334], [1126.0, 921.875], [1124.0, 3956.0], [1127.0, 931.0], [1132.0, 930.0], [1133.0, 924.3333333333334], [1134.0, 930.5999999999999], [1135.0, 1360.4285714285716], [1153.0, 972.25], [1172.0, 964.0], [1171.0, 4100.666666666667], [1170.0, 4095.0], [1174.0, 4093.5], [1173.0, 4094.6666666666665], [1176.0, 4079.8], [1175.0, 4092.0], [1177.0, 824.5], [1178.0, 966.0], [1179.0, 4084.0], [1209.0, 3926.5], [1189.0, 4085.0], [1188.0, 4085.0], [1195.0, 4038.5], [1194.0, 4080.8], [1202.0, 3852.0], [1201.0, 3933.0], [1200.0, 3932.0], [1166.0, 4100.111111111111], [1164.0, 4099.0], [1163.0, 4102.333333333333], [1161.0, 4098.0], [1156.0, 4088.0], [1199.0, 3959.3333333333335], [1196.0, 4038.6666666666665], [1273.0, 1135.2307692307693], [1274.0, 1109.0], [1248.0, 2880.833333333333], [1251.0, 2898.7111111111108], [1249.0, 2892.0], [1255.0, 2923.3437499999995], [1252.0, 2891.090909090909], [1272.0, 1129.5], [1267.0, 1171.5555555555557], [1264.0, 2847.5], [1246.0, 3089.6923076923076], [1217.0, 3173.5], [1216.0, 2802.0833333333335], [1219.0, 2667.142857142857], [1218.0, 2670.375], [1221.0, 2661.46875], [1220.0, 2664.3508771929824], [1225.0, 2689.933333333333], [1222.0, 2660.9811320754707], [1227.0, 2709.0], [1226.0, 2719.777777777778], [1229.0, 2687.6666666666665], [1228.0, 2663.6666666666665], [1231.0, 2719.0], [1230.0, 2702.0], [1243.0, 2903.0], [1242.0, 2901.0], [1241.0, 2818.0], [1240.0, 3123.090909090909], [1238.0, 2841.1428571428573], [1232.0, 2741.932692307692], [1263.0, 1180.0], [1261.0, 3076.737704918033], [1260.0, 2818.2571428571423], [1258.0, 1227.047619047619], [1256.0, 2339.0588235294117], [1268.0, 2762.0], [1310.0, 1115.0], [1329.0, 1118.0], [1311.0, 2546.0], [1292.0, 2654.8333333333335], [1291.0, 2744.571428571429], [1293.0, 2551.0], [1304.0, 1150.8333333333333], [1307.0, 2371.0], [1306.0, 2380.5], [1303.0, 1114.0], [1300.0, 1113.0], [1297.0, 1181.0], [1296.0, 2445.0], [1339.0, 1784.5], [1315.0, 2173.5], [1312.0, 2262.5], [1336.0, 1958.7142857142858], [1326.0, 1816.0], [1323.0, 2524.0], [1381.0, 1992.25], [1401.0, 1959.272727272727], [1398.0, 2132.0], [1397.0, 1866.0], [1396.0, 1841.4338235294117], [1385.0, 1963.3333333333333], [1383.0, 2028.913043478261], [1382.0, 1913.0], [1380.0, 2007.6470588235295], [1379.0, 2009.6486486486488], [1451.0, 1133.5], [1452.0, 1132.0], [1442.0, 1132.0], [1447.0, 1933.0], [1409.0, 1815.6931818181824], [1408.0, 1875.4], [1510.0, 1278.0], [1535.0, 1406.4], [1503.0, 1453.6250000000005], [1501.0, 1605.0], [1499.0, 1604.0], [1490.0, 1895.0], [1474.0, 1929.0], [1556.0, 1096.0], [1555.0, 1277.8181818181818], [1549.0, 1347.0], [1545.0, 1194.5], [1544.0, 1188.6], [1543.0, 1184.0], [1537.0, 1293.2857142857144], [1536.0, 1313.5862068965519], [1.0, 10732.0]], "isOverall": false, "label": "Divide", "isController": false}, {"data": [[1095.8414999999995, 1976.1554999999994]], "isOverall": false, "label": "Divide-Aggregated", "isController": false}, {"data": [[2.0, 4636.0], [4.0, 4611.0], [5.0, 4295.0], [6.0, 149.0], [7.0, 4923.0], [8.0, 6077.0], [9.0, 5011.0], [10.0, 1301.0], [11.0, 293.0], [12.0, 137.0], [13.0, 136.0], [14.0, 406.0], [16.0, 741.0], [17.0, 875.0], [18.0, 870.0], [19.0, 869.0], [20.0, 875.0], [22.0, 895.5], [23.0, 944.0], [24.0, 1097.0], [28.0, 1995.5], [30.0, 972.5], [34.0, 1092.75], [36.0, 1094.5], [38.0, 3242.0], [41.0, 1099.0], [40.0, 1089.0], [42.0, 1099.0], [44.0, 1099.0], [47.0, 2237.6666666666665], [51.0, 4507.5], [52.0, 4508.0], [56.0, 3079.25], [61.0, 3450.0], [63.0, 3591.0], [66.0, 3563.6666666666665], [70.0, 1651.5], [74.0, 3986.5], [73.0, 3083.0], [79.0, 3573.0], [77.0, 4520.333333333333], [81.0, 4157.333333333333], [85.0, 4510.666666666667], [84.0, 2878.0], [91.0, 2873.0], [90.0, 2874.0], [95.0, 2876.0], [93.0, 3419.3333333333335], [99.0, 2875.0], [97.0, 3974.3333333333335], [103.0, 2872.0], [102.0, 2871.0], [101.0, 3689.0], [100.0, 4507.0], [107.0, 2867.3333333333335], [111.0, 3699.5], [110.0, 2890.5], [108.0, 2866.0], [114.0, 3694.0], [112.0, 2869.0], [119.0, 2862.0], [118.0, 3810.0], [122.0, 2861.0], [120.0, 2859.5], [127.0, 2865.0], [126.0, 2865.0], [124.0, 3969.6666666666665], [134.0, 4581.0], [129.0, 3987.6666666666665], [128.0, 4525.0], [143.0, 4519.0], [142.0, 2925.0], [140.0, 2080.4], [137.0, 2493.75], [149.0, 1260.6666666666667], [147.0, 432.0], [146.0, 2571.5], [144.0, 4510.0], [152.0, 430.0], [166.0, 423.75], [164.0, 423.0], [163.0, 4501.0], [162.0, 2460.5], [173.0, 3793.0], [172.0, 3409.0], [171.0, 4565.0], [169.0, 2490.0], [168.0, 423.0], [183.0, 3735.5], [181.0, 2772.0], [178.0, 4069.6666666666665], [176.0, 4563.0], [189.0, 2907.0], [188.0, 2908.0], [186.0, 3971.6666666666665], [185.0, 4563.0], [184.0, 2910.0], [199.0, 4544.0], [196.0, 416.75], [195.0, 417.5], [194.0, 418.0], [207.0, 3242.333333333333], [206.0, 515.5], [203.0, 1322.2], [215.0, 1857.3333333333335], [212.0, 4547.0], [223.0, 511.0], [222.0, 1855.3333333333335], [220.0, 514.0], [219.0, 513.0], [218.0, 513.0], [216.0, 4545.0], [228.0, 2667.0], [225.0, 1107.0], [224.0, 511.0], [235.0, 2242.0], [234.0, 2244.3333333333335], [232.0, 2452.6666666666665], [246.0, 4643.0], [245.0, 4654.5], [243.0, 2245.3333333333335], [241.0, 4658.0], [240.0, 3051.0], [254.0, 3441.5], [259.0, 477.3333333333333], [270.0, 2230.5], [268.0, 4512.0], [267.0, 1368.0], [266.0, 475.0], [265.0, 2242.0], [263.0, 2410.666666666667], [260.0, 3171.0], [257.0, 477.5], [256.0, 2240.0], [285.0, 2311.3333333333335], [283.0, 2247.0], [282.0, 2257.0], [281.0, 2237.0], [278.0, 2242.0], [277.0, 2248.0], [276.0, 4644.0], [274.0, 2226.0], [272.0, 4513.0], [300.0, 2589.5], [296.0, 506.7692307692308], [288.0, 582.9], [299.0, 179.14285714285714], [303.0, 2435.0], [298.0, 2381.5], [297.0, 2473.0], [293.0, 2260.5], [291.0, 3141.6666666666665], [290.0, 2401.0], [318.0, 2712.0], [314.0, 1449.0], [313.0, 191.4], [316.0, 2083.0], [319.0, 2717.0], [312.0, 942.0], [311.0, 2466.5], [309.0, 2620.6666666666665], [306.0, 2548.5], [305.0, 2395.5], [335.0, 2702.0], [324.0, 156.0], [329.0, 520.7142857142858], [334.0, 2705.0], [333.0, 2706.0], [331.0, 2722.0], [330.0, 1826.5], [328.0, 2715.6666666666665], [325.0, 2702.0], [323.0, 2688.0], [320.0, 2714.5], [336.0, 181.75], [350.0, 2713.0], [349.0, 2709.5], [348.0, 2693.5], [346.0, 2693.3333333333335], [344.0, 2696.0], [343.0, 2701.5], [342.0, 2714.0], [364.0, 2690.6666666666665], [367.0, 2708.0], [366.0, 2707.0], [365.0, 2708.0], [363.0, 2692.0], [357.0, 2705.6666666666665], [355.0, 2698.0], [354.0, 2712.6666666666665], [352.0, 2712.0], [371.0, 187.15384615384616], [372.0, 176.58333333333337], [382.0, 2700.0], [381.0, 2689.6666666666665], [378.0, 2691.5], [376.0, 2700.0], [375.0, 2691.0], [373.0, 2701.0], [370.0, 2694.0], [369.0, 2706.0], [399.0, 2701.5], [398.0, 2697.0], [397.0, 2681.0], [394.0, 2703.0], [392.0, 2690.0], [390.0, 2681.0], [389.0, 2688.0], [387.0, 2689.0], [413.0, 2689.0], [412.0, 2686.0], [406.0, 2697.75], [405.0, 2697.0], [401.0, 2694.4444444444443], [419.0, 2710.0], [427.0, 2710.0], [425.0, 2708.0], [424.0, 2705.6], [423.0, 2709.0], [421.0, 2700.5], [420.0, 2699.3333333333335], [418.0, 2688.0], [417.0, 2691.0], [446.0, 2724.0], [442.0, 2688.5], [440.0, 2689.0], [436.0, 2690.5], [435.0, 2690.0], [433.0, 2714.0], [432.0, 2711.0], [461.0, 2736.0], [462.0, 2695.0], [460.0, 1973.6], [450.0, 2726.0], [448.0, 2718.0], [459.0, 2710.0], [458.0, 2719.5], [456.0, 2701.0], [455.0, 2715.0], [454.0, 2716.0], [452.0, 2716.5], [478.0, 2704.0], [474.0, 2703.5], [473.0, 2703.5], [472.0, 2714.0], [469.0, 2708.0], [468.0, 2708.0], [467.0, 2703.0], [466.0, 2720.0], [465.0, 2688.6666666666665], [495.0, 2721.0], [492.0, 1919.6666666666667], [491.0, 2722.0], [490.0, 2722.5], [488.0, 2698.0], [487.0, 2717.0], [485.0, 2714.6666666666665], [484.0, 2717.0], [482.0, 2714.5], [481.0, 2724.0], [509.0, 2721.5], [507.0, 2721.0], [505.0, 2721.0], [504.0, 2728.0], [503.0, 2721.6666666666665], [501.0, 2720.3333333333335], [498.0, 2721.6666666666665], [497.0, 2726.0], [537.0, 1449.0], [538.0, 295.3548387096774], [539.0, 2693.6666666666665], [536.0, 350.25], [519.0, 1481.3333333333333], [517.0, 2101.5], [516.0, 239.0], [514.0, 2718.0], [513.0, 2718.0], [518.0, 1066.3333333333335], [535.0, 2211.2], [532.0, 360.5], [533.0, 2726.0], [534.0, 363.8333333333333], [529.0, 2079.5], [528.0, 1475.5], [543.0, 2703.0], [542.0, 2697.0], [541.0, 1958.3333333333333], [527.0, 234.0], [526.0, 1719.6], [525.0, 1476.0], [524.0, 232.0], [522.0, 1704.0], [520.0, 240.0], [569.0, 2702.0], [552.0, 391.0], [553.0, 2711.0], [554.0, 334.0454545454546], [555.0, 1877.6666666666667], [557.0, 2702.0], [556.0, 2709.0], [566.0, 368.0], [565.0, 2711.0], [564.0, 2891.0], [563.0, 2717.0], [562.0, 2892.6666666666665], [574.0, 2053.5], [572.0, 2701.0], [568.0, 2702.0], [551.0, 2711.6666666666665], [548.0, 2714.5], [545.0, 2715.5], [558.0, 2710.0], [567.0, 2671.5], [604.0, 2724.5], [577.0, 1550.75], [582.0, 1492.0], [578.0, 2762.0], [583.0, 2799.0], [587.0, 224.11111111111111], [585.0, 2795.0], [584.0, 2797.0], [588.0, 2787.6666666666665], [590.0, 2788.0], [576.0, 2763.0], [589.0, 2792.0], [607.0, 2788.0], [592.0, 2788.3333333333335], [595.0, 2782.0], [594.0, 2784.0], [603.0, 2690.0], [602.0, 2780.0], [599.0, 2780.0], [598.0, 2788.0], [613.0, 195.0], [621.0, 181.97727272727272], [608.0, 2784.5], [612.0, 2777.0], [610.0, 2776.5], [620.0, 194.0], [619.0, 1484.5], [618.0, 1480.0], [617.0, 2764.0], [638.0, 2751.3333333333335], [629.0, 2761.0], [628.0, 2761.0], [631.0, 2755.6666666666665], [630.0, 2758.0], [637.0, 2752.0], [636.0, 2766.0], [635.0, 2753.0], [633.0, 2754.6666666666665], [632.0, 2754.0], [615.0, 2765.0], [614.0, 2744.0], [668.0, 2746.0], [641.0, 205.0], [655.0, 2740.5], [640.0, 2763.5], [653.0, 2746.0], [652.0, 2756.5], [650.0, 2753.5], [649.0, 2767.0], [648.0, 2755.0], [671.0, 2724.0], [658.0, 2727.0], [657.0, 2734.5], [661.0, 2771.0], [660.0, 2725.0], [670.0, 2726.0], [669.0, 2767.0], [667.0, 2768.0], [666.0, 2770.0], [664.0, 2769.0], [647.0, 2760.0], [645.0, 2756.3333333333335], [643.0, 2758.0], [663.0, 2742.0], [662.0, 2724.0], [701.0, 2751.3333333333335], [703.0, 2818.5], [700.0, 2810.5], [698.0, 2783.6666666666665], [695.0, 2808.6666666666665], [690.0, 2811.6666666666665], [688.0, 2809.0], [687.0, 2761.0], [672.0, 2767.0], [675.0, 2777.0], [674.0, 2723.0], [678.0, 2775.5], [676.0, 3553.5], [685.0, 2727.0], [683.0, 2720.5], [680.0, 2724.0], [730.0, 2739.0], [710.0, 191.4], [711.0, 1947.5], [712.0, 210.0], [716.0, 1101.2222222222222], [718.0, 2779.0], [707.0, 2813.5], [705.0, 2815.0], [735.0, 2868.0], [721.0, 2779.0], [720.0, 2876.0], [729.0, 2740.6666666666665], [727.0, 2801.0], [724.0, 2891.0], [755.0, 1841.0], [765.0, 2862.0], [763.0, 2865.0], [762.0, 3885.3333333333335], [760.0, 2868.0], [751.0, 2894.4], [737.0, 2868.0], [740.0, 2764.6666666666665], [738.0, 2826.6], [743.0, 2788.0], [741.0, 2758.0], [746.0, 2790.0], [744.0, 2790.5], [758.0, 3887.0], [757.0, 1738.0], [756.0, 2894.0], [754.0, 2870.0], [753.0, 2882.0], [798.0, 1751.0], [799.0, 1783.0], [797.0, 1752.0], [796.0, 4200.5], [794.0, 4172.333333333333], [775.0, 2980.0], [773.0, 2981.0], [772.0, 2976.0], [770.0, 3802.0], [769.0, 3881.5], [768.0, 2822.0], [782.0, 1670.0], [781.0, 4358.5], [779.0, 2943.0], [778.0, 1524.6666666666667], [791.0, 3801.6666666666665], [788.0, 3011.0], [786.0, 2657.0], [784.0, 4550.0], [826.0, 1771.0], [827.0, 3302.0], [824.0, 1777.0], [807.0, 3492.0], [805.0, 1813.0], [803.0, 1787.0], [802.0, 1795.0], [801.0, 1789.0], [800.0, 1784.0], [823.0, 3239.5], [821.0, 4654.5], [817.0, 4343.0], [816.0, 1811.3333333333333], [810.0, 1814.0], [809.0, 1817.0], [808.0, 4306.0], [847.0, 3272.0], [858.0, 3088.0], [857.0, 3080.0], [839.0, 3286.0], [836.0, 3285.5], [835.0, 3285.0], [833.0, 3285.0], [854.0, 3073.0], [852.0, 3185.8], [846.0, 3274.0], [845.0, 3290.625], [844.0, 3286.0], [841.0, 3304.0], [880.0, 1487.0], [884.0, 3006.0], [883.0, 2988.0], [882.0, 3004.3333333333335], [878.0, 3020.6666666666665], [864.0, 3017.0], [868.0, 3016.0], [866.0, 3001.3333333333335], [871.0, 3000.0], [869.0, 3030.0], [877.0, 3008.0], [876.0, 3010.0], [875.0, 3008.0], [874.0, 3009.5], [872.0, 3006.0], [926.0, 2868.0], [898.0, 237.33333333333334], [911.0, 2967.0], [897.0, 1772.4], [910.0, 2985.5], [909.0, 2984.0], [907.0, 2986.0], [905.0, 2987.25], [904.0, 3003.5], [927.0, 2869.0], [925.0, 2340.3333333333335], [922.0, 2872.0], [921.0, 2983.6666666666665], [902.0, 2997.0], [901.0, 1469.0], [900.0, 2995.0], [899.0, 2230.5], [919.0, 2979.0], [917.0, 2973.8], [912.0, 2977.5], [954.0, 1357.2], [959.0, 2863.6666666666665], [952.0, 3400.5], [931.0, 2871.0], [930.0, 2874.0], [929.0, 3145.5], [951.0, 3396.0], [946.0, 3401.0], [944.0, 3129.0], [942.0, 2854.0], [941.0, 2856.0], [940.0, 2858.0], [939.0, 3080.6], [938.0, 3225.6666666666665], [988.0, 2910.5], [989.0, 2909.5], [985.0, 2576.5], [966.0, 1369.3333333333333], [962.0, 2863.75], [960.0, 2867.0], [981.0, 2399.3333333333335], [978.0, 1255.5], [976.0, 2783.0], [975.0, 3120.25], [974.0, 2843.0], [970.0, 2846.0], [969.0, 1962.0], [968.0, 1402.0], [1021.0, 1102.6], [1022.0, 2852.0], [1020.0, 1104.0], [1019.0, 1108.0], [1016.0, 1108.0], [999.0, 1118.0], [1005.0, 1112.0], [1003.0, 1116.0], [1000.0, 1118.0], [1002.0, 1119.0], [1004.0, 1121.0], [1015.0, 1118.0], [1014.0, 1118.0], [1013.0, 1118.0], [1008.0, 1117.5], [1074.0, 1340.4], [1082.0, 382.0], [1086.0, 366.14285714285717], [1058.0, 2786.5], [1084.0, 385.0], [1080.0, 1184.6666666666665], [1078.0, 380.0], [1076.0, 1584.75], [1072.0, 381.0], [1036.0, 2858.0], [1034.0, 2858.0], [1032.0, 2870.0], [1030.0, 2843.5], [1028.0, 2847.5], [1026.0, 1029.0], [1024.0, 977.0], [1052.0, 2785.0], [1050.0, 2784.0], [1048.0, 944.0], [1046.0, 1863.5], [1042.0, 2786.0], [1040.0, 1630.3333333333335], [1062.0, 647.6666666666667], [1064.0, 781.3333333333334], [1066.0, 2777.0], [1070.0, 386.0], [1150.0, 3063.3333333333335], [1120.0, 672.0], [1092.0, 428.12], [1090.0, 383.5], [1088.0, 1340.8], [1118.0, 379.0], [1112.0, 2771.0], [1110.0, 2768.0], [1106.0, 2772.0], [1104.0, 2772.0], [1116.0, 2768.0], [1130.0, 1262.75], [1132.0, 3019.5], [1134.0, 2878.0], [1128.0, 2452.75], [1126.0, 667.0], [1124.0, 2254.6666666666665], [1122.0, 1265.5], [1148.0, 3062.0], [1146.0, 1129.0], [1144.0, 1142.0], [1142.0, 2553.0], [1140.0, 3061.0], [1102.0, 2772.0], [1100.0, 2773.5], [1094.0, 2771.0], [1178.0, 776.0], [1192.0, 3094.5], [1176.0, 3099.0], [1174.0, 3095.0], [1172.0, 3076.0], [1170.0, 3085.0], [1168.0, 3092.0], [1156.0, 2542.0], [1166.0, 3082.2000000000003], [1184.0, 3079.0], [1188.0, 2763.8], [1194.0, 2289.0], [1196.0, 2469.0], [1198.0, 2977.0], [1212.0, 2874.0], [1210.0, 2877.0], [1202.0, 2937.0], [1200.0, 2957.0], [1272.0, 1927.0], [1256.0, 1138.6666666666667], [1252.0, 1776.0], [1250.0, 2672.0], [1258.0, 1794.0], [1260.0, 1795.5], [1264.0, 1767.0], [1246.0, 1789.5], [1216.0, 1511.0], [1218.0, 1516.0], [1220.0, 1508.0], [1222.0, 1481.0], [1226.0, 1538.0], [1242.0, 1646.0], [1240.0, 1500.5], [1238.0, 1533.0], [1236.0, 1532.0], [1234.0, 1533.0], [1232.0, 1517.1666666666667], [1342.0, 1209.5], [1338.0, 697.25], [1312.0, 1777.0], [1314.0, 1733.5], [1318.0, 1289.0], [1320.0, 1288.0], [1324.0, 1128.0], [1334.0, 695.625], [1340.0, 1722.0], [1336.0, 1329.6666666666667], [1332.0, 1128.0], [1328.0, 1131.0], [1294.0, 1966.0], [1292.0, 2241.0], [1310.0, 1795.0], [1306.0, 1901.0], [1304.0, 1913.0], [1302.0, 1911.6666666666667], [1296.0, 1965.0], [1372.0, 1271.0], [1404.0, 1149.0], [1366.0, 1270.5], [1362.0, 1270.0], [1360.0, 1269.0], [1370.0, 1270.0], [1348.0, 699.0], [1350.0, 1763.0], [1392.0, 1232.0], [1352.0, 1270.5], [1394.0, 1227.0], [1396.0, 1230.0], [1344.0, 1125.2], [1376.0, 1270.3333333333333], [1380.0, 1266.0], [1390.0, 1233.6666666666667], [1406.0, 1147.0], [1402.0, 1152.0], [1418.0, 1092.0], [1468.0, 1070.0], [1444.0, 1076.0], [1448.0, 1079.5], [1454.0, 1073.0], [1470.0, 1069.0], [1456.0, 1073.0], [1422.0, 1092.0], [1420.0, 1092.5], [1416.0, 1094.0], [1414.0, 1096.0], [1408.0, 1145.0], [1438.0, 1083.0], [1436.0, 1075.5], [1434.0, 1082.0], [1432.0, 1085.0], [1430.0, 1081.0], [1428.0, 1085.0], [1424.0, 1089.5], [1526.0, 813.0], [1504.0, 814.0], [1506.0, 813.0], [1514.0, 857.0], [1518.0, 822.0], [1534.0, 846.5], [1532.0, 847.0], [1530.0, 811.5], [1528.0, 809.0], [1524.0, 816.5], [1522.0, 818.0], [1520.0, 819.0], [1472.0, 1064.0], [1476.0, 1078.5], [1474.0, 1078.5], [1480.0, 1049.5], [1478.0, 1073.5], [1484.0, 1060.5], [1482.0, 1048.0], [1486.0, 1037.0], [1498.0, 1028.0], [1496.0, 1035.0], [1490.0, 1039.0], [1488.0, 1037.0], [1540.0, 759.0], [1556.0, 674.0], [1536.0, 848.0], [1538.0, 768.0], [1542.0, 766.0], [1552.0, 681.0], [1550.0, 680.0], [1548.0, 684.0], [1544.0, 759.0], [1083.0, 1978.6666666666667], [1087.0, 1311.0], [1057.0, 1869.0], [1085.0, 382.0], [1081.0, 1817.2], [1079.0, 2778.0], [1077.0, 383.6666666666667], [1075.0, 2780.0], [1037.0, 1022.0], [1035.0, 2860.0], [1033.0, 2861.0], [1031.0, 2870.0], [1025.0, 976.0], [1055.0, 2781.5], [1049.0, 2784.0], [1045.0, 2775.0], [1041.0, 946.0], [1073.0, 1311.0], [1059.0, 667.5], [1069.0, 2181.5], [1067.0, 2780.0], [1071.0, 2424.0], [1101.0, 2774.0], [1091.0, 1578.1666666666667], [1089.0, 1311.0], [1119.0, 1655.0], [1117.0, 1170.0], [1115.0, 473.25], [1111.0, 2771.0], [1109.0, 2770.5], [1105.0, 2768.5], [1131.0, 2880.0], [1133.0, 2989.0], [1135.0, 2988.0], [1125.0, 1460.6666666666665], [1145.0, 2404.0], [1143.0, 2553.0], [1141.0, 2433.0], [1139.0, 3074.75], [1099.0, 2774.0], [1097.0, 2774.5], [1095.0, 2775.0], [1093.0, 2776.0], [1121.0, 2039.0], [1153.0, 3073.0], [1209.0, 1445.0], [1175.0, 3097.0], [1173.0, 3095.0], [1171.0, 3078.0], [1179.0, 2256.6666666666665], [1155.0, 3033.5], [1167.0, 3084.0], [1215.0, 1513.0], [1185.0, 2489.6666666666665], [1189.0, 3090.0], [1193.0, 3077.0], [1195.0, 3042.0], [1197.0, 1359.0], [1199.0, 2960.0], [1207.0, 1730.2], [1201.0, 2941.0], [1277.0, 1927.0], [1267.0, 812.0], [1255.0, 1788.0], [1253.0, 1788.0], [1251.0, 1781.75], [1259.0, 1796.0], [1275.0, 1926.3333333333333], [1271.0, 1928.8333333333333], [1269.0, 1929.0], [1217.0, 2663.0], [1219.0, 1511.0], [1221.0, 1481.0], [1223.0, 1546.0], [1225.0, 1548.0], [1245.0, 1788.0], [1243.0, 1646.0], [1241.0, 1648.0], [1237.0, 1533.5], [1263.0, 1769.0], [1261.0, 1834.0], [1341.0, 1724.0], [1315.0, 1730.0], [1319.0, 1293.0], [1321.0, 1285.0], [1323.0, 1370.3333333333333], [1339.0, 1543.6666666666667], [1335.0, 1130.0], [1331.0, 1129.25], [1329.0, 1130.0], [1293.0, 2077.0], [1291.0, 1916.0], [1283.0, 1931.25], [1281.0, 1926.5], [1311.0, 1793.0], [1307.0, 1892.0], [1305.0, 1911.5], [1299.0, 1907.0], [1297.0, 1916.0], [1345.0, 1766.0], [1367.0, 701.0], [1365.0, 1271.0], [1363.0, 1270.0], [1369.0, 1270.0], [1371.0, 1270.0], [1375.0, 1271.0], [1373.0, 1273.0], [1347.0, 1718.0], [1349.0, 1736.0], [1395.0, 1232.0], [1397.0, 1624.0], [1401.0, 1235.0], [1399.0, 1235.5], [1407.0, 1145.0], [1379.0, 1270.6666666666667], [1377.0, 1270.0], [1383.0, 1242.6666666666667], [1389.0, 1234.0], [1387.0, 1236.5], [1391.0, 1233.0], [1405.0, 1148.0], [1403.0, 1151.0], [1469.0, 1068.0], [1471.0, 1068.0], [1443.0, 1077.5], [1441.0, 1078.0], [1445.0, 1078.0], [1447.0, 1077.5], [1453.0, 1073.5], [1451.0, 1074.0], [1455.0, 1072.0], [1467.0, 1103.0], [1465.0, 1102.0], [1463.0, 1080.0], [1461.0, 1094.0], [1459.0, 1107.0], [1457.0, 1083.0], [1421.0, 1092.0], [1417.0, 1094.0], [1415.0, 1096.0], [1413.0, 1096.5], [1411.0, 1098.0], [1409.0, 1142.0], [1439.0, 1071.0], [1437.0, 1079.0], [1433.0, 1085.0], [1431.0, 1081.0], [1427.0, 1084.0], [1425.0, 1091.0], [1507.0, 816.0], [1509.0, 843.0], [1531.0, 847.0], [1535.0, 847.0], [1505.0, 813.0], [1511.0, 839.5], [1513.0, 826.0], [1517.0, 839.5], [1515.0, 851.0], [1519.0, 820.0], [1527.0, 816.0], [1525.0, 814.0], [1503.0, 998.0], [1485.0, 1040.0], [1501.0, 997.0], [1539.0, 767.0], [1547.0, 684.0], [1537.0, 832.0], [1541.0, 766.0], [1543.0, 765.0], [1555.0, 680.0], [1553.0, 680.5], [1549.0, 684.0], [1545.0, 756.0], [1.0, 285.0]], "isOverall": false, "label": "Multiply", "isController": false}, {"data": [[763.0400000000002, 1901.5325000000057]], "isOverall": false, "label": "Multiply-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1556.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 18649.033333333333, "minX": 1.66218006E12, "maxY": 20933.683333333334, "series": [{"data": [[1.66218006E12, 18649.033333333333], [1.66218012E12, 19171.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66218006E12, 19118.983333333334], [1.66218012E12, 20933.683333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66218012E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 603.9191919191921, "minX": 1.66218006E12, "maxY": 3308.492957746473, "series": [{"data": [[1.66218006E12, 1122.5414273995075], [1.66218012E12, 3308.492957746473]], "isOverall": false, "label": "Divide", "isController": false}, {"data": [[1.66218006E12, 603.9191919191921], [1.66218012E12, 2589.5554705432314]], "isOverall": false, "label": "Multiply", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66218012E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 603.9163059163058, "minX": 1.66218006E12, "maxY": 3307.810499359794, "series": [{"data": [[1.66218006E12, 1122.1050041017236], [1.66218012E12, 3307.810499359794]], "isOverall": false, "label": "Divide", "isController": false}, {"data": [[1.66218006E12, 603.9163059163058], [1.66218012E12, 2589.217291507268]], "isOverall": false, "label": "Multiply", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66218012E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.66218006E12, "maxY": 1492.2291933418699, "series": [{"data": [[1.66218006E12, 396.75717801476617], [1.66218012E12, 1492.2291933418699]], "isOverall": false, "label": "Divide", "isController": false}, {"data": [[1.66218006E12, 0.0], [1.66218012E12, 1397.5860749808746]], "isOverall": false, "label": "Multiply", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66218012E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 133.0, "minX": 1.66218006E12, "maxY": 7291.0, "series": [{"data": [[1.66218006E12, 2914.0], [1.66218012E12, 7291.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66218006E12, 1271.0], [1.66218012E12, 4574.7]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66218006E12, 2149.5800000000004], [1.66218012E12, 5960.77]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66218006E12, 1720.4], [1.66218012E12, 5850.85]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66218006E12, 133.0], [1.66218012E12, 136.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66218006E12, 564.0], [1.66218012E12, 2742.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66218012E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 285.0, "minX": 2.0, "maxY": 10732.0, "series": [{"data": [[532.0, 2716.5], [2.0, 285.0], [623.0, 353.0], [3.0, 4614.0], [857.0, 2788.5], [226.0, 2985.5], [317.0, 808.0], [5.0, 4609.0], [373.0, 1585.0], [6.0, 293.0], [100.0, 317.5], [457.0, 1513.0], [499.0, 1096.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[532.0, 2821.5], [2.0, 10732.0], [5.0, 6077.0], [373.0, 1965.0], [6.0, 5011.0], [857.0, 2722.0], [457.0, 2771.5], [226.0, 3181.5], [499.0, 1774.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 857.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 285.0, "minX": 2.0, "maxY": 10732.0, "series": [{"data": [[532.0, 2716.5], [2.0, 285.0], [623.0, 353.0], [3.0, 4614.0], [857.0, 2788.5], [226.0, 2985.5], [317.0, 808.0], [5.0, 4609.0], [373.0, 1585.0], [6.0, 293.0], [100.0, 317.5], [457.0, 1513.0], [499.0, 1096.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[532.0, 2821.0], [2.0, 10732.0], [5.0, 6076.0], [373.0, 1963.0], [6.0, 5011.0], [857.0, 2721.0], [457.0, 2771.0], [226.0, 3181.5], [499.0, 1774.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 857.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 13.016666666666667, "minX": 1.66218006E12, "maxY": 53.65, "series": [{"data": [[1.66218006E12, 53.65], [1.66218012E12, 13.016666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66218012E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 6.783333333333333, "minX": 1.66218006E12, "maxY": 25.083333333333332, "series": [{"data": [[1.66218006E12, 25.083333333333332], [1.66218012E12, 13.7]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.66218006E12, 6.783333333333333], [1.66218012E12, 21.1]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66218012E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 3.1, "minX": 1.66218006E12, "maxY": 13.533333333333333, "series": [{"data": [[1.66218006E12, 6.783333333333333], [1.66218012E12, 9.916666666666666]], "isOverall": false, "label": "Divide-failure", "isController": false}, {"data": [[1.66218012E12, 11.183333333333334]], "isOverall": false, "label": "Multiply-failure", "isController": false}, {"data": [[1.66218006E12, 11.55], [1.66218012E12, 10.6]], "isOverall": false, "label": "Multiply-success", "isController": false}, {"data": [[1.66218006E12, 13.533333333333333], [1.66218012E12, 3.1]], "isOverall": false, "label": "Divide-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66218012E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 6.783333333333333, "minX": 1.66218006E12, "maxY": 25.083333333333332, "series": [{"data": [[1.66218006E12, 25.083333333333332], [1.66218012E12, 13.7]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.66218006E12, 6.783333333333333], [1.66218012E12, 21.1]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66218012E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

